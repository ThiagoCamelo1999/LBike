// Importando o Express para criar as rotas e o roteador
const express = require("express");
const router = express.Router();

// Importando os modelos Item e Pedido do banco de dados
const { Item, Pedido } = require("../models");

// Importando o middleware de autentica√ß√£o para proteger a rota de pedidos
const autenticar = require("../middleware/auth"); // ‚úÖ Importa o middleware de autentica√ß√£o

// **Rota para listar todos os produtos dispon√≠veis na loja**
// Quando a rota /produtos for acessada com o m√©todo GET, retorna todos os itens do banco
router.get("/produtos", async (req, res) => {
  try {
    // Busca todos os produtos (itens) na tabela "Item"
    const produtos = await Item.findAll();
    // Retorna os produtos encontrados com status 200
    res.status(200).json(produtos);
  } catch (error) {
    console.error(error);
    // Em caso de erro, retorna um erro gen√©rico com status 500
    res.status(500).json({ error: "Erro ao buscar produtos." });
  }
});

// **Rota para criar um novo pedido**
// Essa rota √© protegida pelo middleware de autentica√ß√£o, que verifica se o usu√°rio est√° autenticado
router.post("/pedidos", autenticar, async (req, res) => {
  try {
    console.log("üí° Corpo da requisi√ß√£o recebido:", req.body);

    // Desestrutura√ß√£o dos dados enviados no corpo da requisi√ß√£o
    const { cliente_nome, itens } = req.body;
    let pedidosCriados = [];
    let erros = [];

    // Verifica se a lista de itens est√° vazia ou n√£o foi fornecida
    if (!itens || itens.length === 0) {
      console.log("üö® Nenhum item encontrado no pedido.");
      return res.status(400).json({ error: "Nenhum item no pedido." });
    }

    // Processa cada item individualmente
    for (const item of itens) {
      console.log(`üîç Processando item ID ${item.produto_id}...`);

      // Busca o produto no banco pelo ID
      const produto = await Item.findByPk(item.produto_id);

      // Se o produto n√£o for encontrado, registra o erro e passa para o pr√≥ximo item
      if (!produto) {
        console.log(`üö® Produto ID ${item.produto_id} n√£o encontrado.`);
        erros.push(`Produto com ID ${item.produto_id} n√£o encontrado.`);
        continue; // Continua para o pr√≥ximo item, sem encerrar a requisi√ß√£o
      }

      // Calcula o valor total do pedido (quantidade * valor unit√°rio do produto)
      const total = item.quantidade * produto.valor_unitario;

      // Cria um novo pedido no banco com as informa√ß√µes fornecidas
      const pedido = await Pedido.create({
        cliente_nome,           // Nome do cliente
        produto_id: item.produto_id,  // ID do produto
        quantidade: item.quantidade,  // Quantidade do produto
        total,                   // Valor total do pedido
        status: "finalizado",    // Status do pedido (pode ser 'pendente', 'finalizado', etc.)
      });

      // Adiciona o pedido criado √† lista de pedidos
      pedidosCriados.push(pedido);
    }

    // Se todos os pedidos foram processados, retorna os pedidos criados
    console.log("üéâ Todos os pedidos foram processados!");
    res.status(200).json({ pedidosCriados, erros }); // Retorna os pedidos criados e os erros encontrados
  } catch (error) {
    console.error("üî• ERRO NO BACKEND:", error);
    // Caso ocorra algum erro durante o processo, retorna um erro gen√©rico com status 500
    res.status(500).json({ error: "Erro ao processar os pedidos." });
  }
});

// Exportando o roteador para que possa ser usado no servidor principal
module.exports = router;
