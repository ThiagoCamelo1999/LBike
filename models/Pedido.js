// Importa o DataTypes do Sequelize para definir os tipos de dados no modelo
const { DataTypes } = require("sequelize");
// Importa a configura칞칚o do banco de dados, que conecta o Sequelize ao banco
const sequelize = require("../config/database");
// Importa o modelo de Item, pois vamos criar uma rela칞칚o entre Pedido e Item
const Item = require("./Item");

// Definindo o modelo Pedido
const Pedido = sequelize.define("Pedido", {
  // Campo para o nome do cliente
  cliente_nome: { 
    type: DataTypes.STRING, // Tipo de dado STRING (texto)
    allowNull: false // N칚o permite que o nome do cliente seja nulo (n칚o pode ser vazio)
  },
  
  // Campo para a quantidade de produtos
  quantidade: { 
    type: DataTypes.INTEGER, // Tipo de dado INTEGER (n칰mero inteiro)
    allowNull: false // N칚o permite que a quantidade seja nula
  },

  // Campo para o valor total do pedido
  total: { 
    type: DataTypes.FLOAT, // Tipo de dado FLOAT (n칰mero com ponto flutuante)
    allowNull: false // N칚o permite que o total seja nulo
  },

  // Campo para o status do pedido, com valor padr칚o "pendente"
  status: { 
    type: DataTypes.STRING, // Tipo de dado STRING (texto)
    defaultValue: "pendente" // Valor padr칚o caso n칚o seja informado (pedido estar치 pendente)
  },
}, {
  timestamps: false // 游댳 Remove os campos createdAt e updatedAt do modelo (n칚o ser치 necess치rio)
});

// Rela칞칚o entre Pedido e Item:
// 1. Cada pedido pertence a um item (pedido est치 associado a um produto espec칤fico)
Pedido.belongsTo(Item, { foreignKey: "produto_id", as: "produto" });
// 2. Um item pode ter muitos pedidos associados a ele (produto pode ter v치rios pedidos)
Item.hasMany(Pedido, { foreignKey: "produto_id", as: "pedidos" });

// Exporta o modelo Pedido para ser utilizado em outras partes do c칩digo
module.exports = Pedido;
