// Importando a biblioteca jwt para trabalhar com tokens de autentica칞칚o
const jwt = require("jsonwebtoken");
// Definindo uma chave secreta que ser치 usada para criar e verificar os tokens
const SECRET_KEY = "chave_secreta"; // 游댳 A mesma chave usada no seu `authController.js`

// Fun칞칚o de middleware para autenticar usu치rios
const autenticar = (req, res, next) => {
  // Obt칠m o token do cabe칞alho da requisi칞칚o. O token vem depois de "Bearer "
  const token = req.headers.authorization?.split(" ")[1]; // Remove a parte "Bearer " e pega o token real

  // Se o token n칚o estiver presente, retorna um erro de acesso n칚o autorizado
  if (!token) {
    return res.status(401).json({ error: "Acesso n칚o autorizado. Token ausente." });
  }

  try {
    // Tenta verificar o token usando a chave secreta
    const decoded = jwt.verify(token, SECRET_KEY);
    
    // Se o token for v치lido, armazena os dados decodificados no objeto de requisi칞칚o
    req.user = decoded; // Armazena os dados do usu치rio na requisi칞칚o
    
    // Chama a pr칩xima fun칞칚o (continuando o fluxo da requisi칞칚o)
    next();
  } catch (error) {
    // Se o token for inv치lido ou expirado, retorna um erro
    res.status(403).json({ error: "Token inv치lido ou expirado" });
  }
};

// Expondo a fun칞칚o de autentica칞칚o para ser usada em outros arquivos
module.exports = autenticar;
