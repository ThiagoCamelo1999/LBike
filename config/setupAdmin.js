// Importando o bcrypt para criptografar a senha
const bcrypt = require("bcrypt");
// Importando o modelo de "Usuario", que representa as informa√ß√µes dos usu√°rios no banco de dados
const Usuario = require("../models/Usuario");

// Fun√ß√£o para criar a conta do dono
const criarDono = async () => {
  try {
    // Dados fixos do dono (admin)
    const email = "admin@lbike.com"; // Endere√ßo de e-mail do dono
    const senha = "admin123"; // üîπ Senha fixa para o dono
    const cpf = "000.000.000-00"; // üîπ CPF padr√£o para o dono
    const telefone = "(00) 00000-0000"; // üîπ Telefone padr√£o para o dono
    const endereco = "Endere√ßo do Dono"; // üîπ Endere√ßo padr√£o para o dono

    // Verifica se j√° existe um dono cadastrado com o mesmo e-mail
    const donoExiste = await Usuario.findOne({ where: { email } });

    // Se o dono n√£o existir, cria a conta
    if (!donoExiste) {
      // Criptografa a senha antes de salvar no banco de dados
      const hashedSenha = await bcrypt.hash(senha, 10);
      
      // Cria o novo usu√°rio (dono) no banco de dados com as informa√ß√µes fornecidas
      await Usuario.create({
        nome: "Dono", // Nome do dono
        cpf,           // CPF do dono
        telefone,      // Telefone do dono
        endereco,      // Endere√ßo do dono
        email,         // E-mail do dono
        senha: hashedSenha, // Senha criptografada
        tipo_usuario: "dono", // Tipo de usu√°rio: dono
      });
      
      // Exibe mensagem indicando que a conta foi criada com sucesso
      console.log("‚úÖ Conta do dono criada com sucesso!");
    } else {
      // Se a conta j√° existir, exibe uma mensagem informando
      console.log("‚ö†Ô∏è Conta do dono j√° existe.");
    }
  } catch (error) {
    // Se houver algum erro durante o processo, exibe uma mensagem de erro
    console.error("Erro ao criar a conta do dono:", error);
  }
};

// Chama a fun√ß√£o para criar o dono
criarDono();
